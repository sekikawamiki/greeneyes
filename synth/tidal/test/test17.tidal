--- [[Conditional Transformers]]  条件付きトランスフォーマー
-- Conditional transformers are functions that apply other transformations under certain cirumstances. These can be based upon the number of cycles, probability or time-range within a pattern.

-- 条件付き変換は、特定の状況下で他の変換を適用する関数です。 これらは、パターン内のサイクル数、確率または時間範囲に基づくことができる。

--- [someCyclesBy]
-- Similar to sometimesBy, but applies/doesn’t apply a function on a cycle-by-cycle basis instead of event by event. Use someCyclesBy to apply a given function for some cycles, but not for others. For example, the following code results in fast 2 being applied for about 25% of all cycles:

-- sometimesByと似ていますが、イベントごとにではなくサイクルごとに関数を適用/適用しません。 一部のサイクルではsomeCyclesByを使用して特定の関数を適用しますが、他の関数では適用しません。 たとえば、次のコードでは、すべてのサイクルの約25％で高速2が適用されます。

d1 $ someCyclesBy 0.25 (fast 3) $ s "bd*8"

d1 silence

-- There is an alias as well:
-- エイリアスもあります：

someCycles = someCyclesBy 0.5s

--- [foldEvery]
-- foldEvery transforms a pattern with a function, but only for the given number of repetitions. It is similar to chaining multiple every functions together.

-- foldEveryは、パターンを関数で変換しますが、与えられた繰り返し回数だけパターンを変換します。 これは、複数の関数をすべて連鎖させることと似ています。

d2 $ foldEvery [3,4,5](fast 2) $ s "bd sn kurt"

d2 silence

-- this is equal to:

d3 $ every 3 (fast 2) $ every 4 (fast 2) $ every 5 (fast 2) $ s "bd sn kurt"

d3 silence

--- [ifp]
-- Decide whether to apply one or another function depending on the result of a test function that is passed the current cycle as a number.

-- 現在のサイクルが数値として渡されたテスト関数の結果に応じて、1つまたは別の関数を適用するかどうかを決定します。

d4 $ slow 6 $ ifp ((== 0).(flip mod 2))
(striate 4)
(# coarse "12 64") $ s "bd hc"

d4 silence

-- This will apply striate 4 for every even cycle and aply # coarse "24 48" for every odd.

-- Detail: As you can see the test function is arbitrary and does not rely on anything tidal specific. In fact it uses only plain haskell functionality, that is: it calculates the modulo of 2 of the current cycle which is either 0 (for even cycles) or 1. It then compares this value against 0 and returns the result, which is either True or False. This is what the ifp signature’s first part signifies (Int -> Bool), a function that takes a whole number and returns either True or False.

-- これは、すべての偶数サイクルに対してストライテート4を適用し、すべての奇数について、粗い「24 48」を適用します。

-- 詳細：あなたが見ることができるように、テスト機能は任意であり、潮汐特有のものに依存しません。 実際には単純なhaskell関数しか使用しません。すなわち、0（偶数サイクルの場合）または1の現在のサイクルの2のモジュロを計算します。次に、この値を0と比較し、結果をTrue またはFalse。 これは、ifpシグネチャの最初の部分が整数を取り、TrueまたはFalseを返す関数であることを示します（Int - > Bool）。

--- [mask]
-- Removes events from second pattern that don’t start during an event from first.
-- Consider this, kind of messy rhythm without any rests.

-- 最初からイベント中に開始しない2番目のパターンからイベントを削除します。
-- これを、休息のない乱雑なリズムの種類と考えてください。

d5 $ s (cat ["sn*8","[cp*4 bd*4 hc*5]"]) # n (run 8)

d5 silence

-- If we apply a mask to it
-- マスクを適用すると

d6 $ s (mask ("1 1 ~ 1 ~ 1 1 ~ 1" :: Pattern Bool)
(cat ["sn*8", "[cp*4 bd*4 hc*5]"]))
# n (run 64)

d6 silence

-- Due to the use of cat here, the same mask is first applied to "sn*8" and in the next cycle to `“[cp4 bd4, hc*5]”.
-- You could achieve the same effect by adding rests within the cat patterns, but mask allows you to do this more easily. It kind of keeps the rhythmic structure and you can change the used samples independently, e.g.

-- ここでcatを使用するため、同じマスクが最初に "sn * 8"に適用され、次のサイクルでは "[cp4 bd4、hc * 5]"に適用されます。
-- catのパターン内に休憩を追加することで同じ効果を得ることができますが、マスクを使うと簡単にこれを行うことができます。 それはリズミカルな構造を維持し、使用されたサンプルを独立して変更することができます。

d7 $ slow 6 $ s (mask ("1 ~ 1 ~ 1 1 ~ 1" :: Pattern Bool)
(cat ["can*8","[cp*4 sn*4, jvbass*16]" ]))
# n (run 16)

d7 silence

-- Detail: It is currently needed to explicitly tell Tidal that the mask itself is a Pattern Bool as it cannot infer this by itself, otherwise it will complain as it does not know how to interpret your input.

--詳細：現時点では、マスク自体がパターンブールであることを明示的に伝える必要があります。そうでなければ、入力を解釈する方法がわからないので不平を言うでしょう。

--- [every]
-- every transforms a pattern with a function every ‘n’th cycle, where n is the value you supply as the first parameter.
-- For example, to make a pattern twice as fast every third cycle:

-- everyはn回目のサイクルごとに関数を持つパターンを変換します。ここでnは最初のパラメータとして指定した値です。
-- たとえば、3サイクルごとに2倍の速さでパターンを作成するには：

d8 $ slow 4 $ every 3 (fast 2) $ s "bd sn kurt"

d8 silence

-- There is a primed variant with an offset
-- オフセット付きの下塗りされたバリアントがあります

-- So every' 4 0 will transform a pattern on cycles 0,4,8,… whereas every' 4 2 will transform the pattern on cycles 2,6,10,…
-- Also, see whenmod.

-- したがって、すべての '4 0はサイクル0,4,8のパターンを変換しますが、すべての' 4 2はサイクル2,6,10、...のパターンを変換します
-- また、whenmodを参照してください。

--- [sometimesBy]
-- Use sometimesBy to apply a given function “sometimes”. For example, the following code results in fast 2 being applied about 25% of the time:

-- 指定した関数を "時には"適用するには、sometimesByを使用します。 たとえば、次のコードでは、fast 2 が約25％の時間に適用されます。

d9 $ slow 2 $ never 0.25 (fast 2) $ s "bd*8"

d9 silence

-- There are some aliases as well:
-- いくつかのエイリアスもあります：
-- sometimes = sometimesBy 0.5
-- often = sometimesBy 0.75
-- rarely = sometimesBy 0.25
-- almostNever = sometimesBy 0.1
-- almostAlways = sometimesBy 0.9
-- never = sometimesBy 0
-- always = sometimesBy 1
